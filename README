This is a wrapper for The CD Input and Control library (libcdio) which
is written in C. The library encapsulates CD-ROM reading and
control. Python programs wishing to be oblivious of the OS- and
device-dependent properties of a CD-ROM can use this library.

The encapsulation is done in two parts. The lower-level python
interface is called pycdio and is generated by SWIG.

The more object-oriented module is cdio; it is a Python class that
uses pycdio. Although pycdio is perfectly usable on its own, it is
expected that cdio is what most people will use. As pycdio more
closely models the C interface, it is conceivable (if unlikely) that
diehard libcdio C users who are very familiar with that interface
could prefer that.

It is probably possible to change the SWIG in such a way to combine
these pieces. However there are the problems. First, I'm not that much
of a SWIG expert. Second it looks as though the resulting SWIG code
would be more complex. Third the separation makes translation very
straight forward to understand and maintain: first get what's in C
into Python as a one-to-one translation. Then we implement some nice
abstraction off of that. The abstraction can be modified without
having to redo the underlying translation. (But the reverse is
generally not true: usually changes to the C-to-python translation,
pycdio, do result in small, but obvious and straightforward changes to
the abstraction layer cdio.)

libcdio is rather large and yet may yet grow a bit. (UDF support may
be on the horizon.)  So what is here is incomplete; over time it may
grow to completion, depending on various factors: e.g. whether others
will help out, whether I get a job at google or some such place that
uses python ;-)

Some of the incompleteness is due to my lack of understanding of how
to get SWIG to accomplish wrapping various return values. If you know
how to do better, please let me know. Likewise suggestions on how to
improve classes or Python interaction are more than welcome.

Sections of libcdio that have been left out wholesale are the (SCSI)
MMC commands, the cdparanoia library, CD-Text handling and the entire
ISO-9660 library. Of the audio controls, I put in those things that
didn't require any thought. 

There is much to be done - you want to help out, please do so!

Standalone documentation is missing although many of the methods,
classes and functions have some document strings. See also the
programs in the example directory.

$Id: README,v 1.1 2006/01/25 04:32:37 rocky Exp $